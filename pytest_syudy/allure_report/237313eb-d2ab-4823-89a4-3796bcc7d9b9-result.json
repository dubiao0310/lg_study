{"uuid": "ffa66083-98b5-45ff-bfd3-b4f508b5b67b", "stop": 1604060000226, "start": 1604060000225, "status": "failed", "labels": [{"name": "package", "value": "test_allure_story"}], "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: '<body>这是一段html代码块</body>'", "trace": "def test_attach_html():\n>       allure.attach.file(\"<body>这是一段html代码块</body>\", \"html代码块\", attachment_type=allure.attachment_type.HTML)\n\ntest_allure_story.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.5/dist-packages/allure_commons/_allure.py:130: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n/usr/local/lib/python3.5/dist-packages/pluggy/hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n/usr/local/lib/python3.5/dist-packages/pluggy/manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n/usr/local/lib/python3.5/dist-packages/pluggy/manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n/usr/local/lib/python3.5/dist-packages/allure_pytest/listener.py:177: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n/usr/local/lib/python3.5/dist-packages/allure_commons/reporter.py:94: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n/usr/local/lib/python3.5/dist-packages/pluggy/hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n/usr/local/lib/python3.5/dist-packages/pluggy/manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n/usr/local/lib/python3.5/dist-packages/pluggy/manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n/usr/local/lib/python3.5/dist-packages/allure_commons/logger.py:43: in report_attached_file\n    shutil.copy2(source, destination)\n/usr/lib/python3.5/shutil.py:251: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = '<body>这是一段html代码块</body>', dst = './allure_report/335effa7-cf5d-407c-a12c-e350df98f353-attachment.html'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        for fn in [src, dst]:\n            try:\n                st = os.stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n    \n        if not follow_symlinks and os.path.islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: '<body>这是一段html代码块</body>'\n\n/usr/lib/python3.5/shutil.py:114: FileNotFoundError"}, "name": "test_attach_html", "historyId": "bd357be660abc61b4aa022063b5c972e", "fullName": "test_allure_story#test_attach_html", "attachments": [{"name": "html代码块", "source": "335effa7-cf5d-407c-a12c-e350df98f353-attachment.html", "type": "application/html"}]}